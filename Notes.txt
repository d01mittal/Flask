Working of a web app:-

Web App (Client) -------->(HTTP Request)--------> Server ------->(HTTP Response)--------> Web App (Client)

How to make a Web App? ---> Frameworks

Why make a Web App? ---> Exchange of information through HTTP protocol.

Server is a computer system.

Flask is a web framework mainly used for creating and working with web applications using Python.

Flask is based on WSGI architecture and supports Jinja.

WSGI is Web Server Gateway Interface. It is an architecture to follow, for handling requests and responses between client
and server.

Jinja is a web template engine. It allows to develop dynamic web pages. It supports "Template Inheritance". It helps 
to reduce repetitiveness and complexity in web page development.

Endpoints are the address of web pages.

Path parameters are used for accessing a particular response at an endpoint.

Query parameters are used for filtering the data received from an endpoint.

**********************************************
HTTP Methods:-
POST--------->CREATE
GET---------->RETRIEVE
PUT---------->UPDATE
DELETE------->DELETE
**********************************************

**********************************************
HTTP Response Codes:-
1xx---------->Informative
2xx---------->Success
3xx---------->Redirection
4xx---------->Client-side error
5xx---------->Server-side error
**********************************************

**********************************************
HTML Tags:-
<html>

    <head>
        <!-- properties of the page -->
    <head>

    <body>
	<!-- contents of the page -->
    <body>

</html>
**********************************************

Dynamic URL-A URL that gets generated automatically based on certain inputs.

URL Redirection-It is the process in which users visit a particular URL, they're navigated/guided to a different URL.

How is URL Redirection helpful?
-> If a page is deleted, users need to be redirected to another URL.
-> If maintenance of a web page is going on, users can be redirected.
-> If website gets renamed, users can be redirected to appropriate URL.

Common response codes in redirection-
301: Moved permanently
302: Redirected temporarily
303: Redirected temporarily
307: Redirected temporarily
308: Redirected permanently

Web Forms-Forms are web pages where end-users can enter their data which can be sent to the back-end server for processing.

**********************************************
Why do we need forms?
-> Allow end-users to interact with webpages and websites.
-> Enable data collection.
-> Facilitates communication with end-users.
-> Makes for dynamic websites.
**********************************************

**********************************************
Working of Web Forms-
-> Front-end design (HTML, CSS, JS)
-> User input captured from input fields
-> Input data processed in the back-end
-> HTTP Request generated and sent to Server
	-> GET-query parameters
	-> POST-store in database
-> HTTP response sent from server
-> Response data parsed & displayed to Client accordingly.
**********************************************

**********************************************
CSRF (Cross-Site Request Forgery)
---------------------------------
What is a CSRF attack?
-> It's a type of an attack where an attacker 'tricks' an end-user in performing some malicious/unintended action over a web application.
-> Such attacks are common when web applications take inputs from users (ex: forms).

---------------------------------
Working of CSRF:
-> An attacker creates a malicious website or an email.
-> These websites/emails usually contain links that will generate a request to the target web application.
-> These requests are designed to perform some unintended actions over the target web application on behalf of the end-users.
-> Since the end-users would be authenticated, these 'unintended' actions would be perceived as 'genuine' by the web application and carried out.
-> These actions generally lead to leakage of sensitive data, transfer of funds etc.

---------------------------------
Prevention of CSRF: (CSRF Tokens)
-> It's a long, random and unpredictable string generated at the server side.
-> The token is shared with the end-user after authentication.
-> Whenever a request is sent to the server, the CSRF token must be provided.
-> The request is processed and a response sent, only when the token is validated.
**********************************************

WTForms- WTForms is a flexible forms validation and rendering library for Python web development. It can work with whatever web framework and template engine you choose. It supports data validation, CSRF protection, internationalization (I18N), and more. There are various community libraries that provide closer integration with popular frameworks.

Why use wtforms?
-> Super convenient to create and handle forms.
-> Helps avoid manual input validation.
-> Helps prevent CSRF attacks.
-> Compliant with 'pythonic' coding style
	-> Treat forms as python classes
	-> Work with forms as objects and attributes
	-> No need to write tedious HTML code (input, label, type, id tags etc.)
-> Integrated with flask (flask-wtf).

**********************************************
What is a database?
-> A database is a means of storing data in an organized manner.
-> Helps to store, process and manipulate large volumes of data rather conveniently.
-> Allows complex datasets to be stored as separate entities and establish relationships between each other for easy
identification.
-> Most preferred method for storing application data in the server side in the back-end.

**********************************************
Types of databases?
Broadly speaking, databases can be organized as:
-> Relational databases (MySQL, PostgreSQL, Oracle)
-> Non-relational databases (MongoDB, Redis, Apache Cassandra)

**********************************************
Contents of a relational database:
-> Tables
-> Rows
-> Columns
-> Primary key
-> Foreign key

**********************************************
Types of mappings:
-> One to One
-> One to Many
-> Many to Many

**********************************************
Object Relational Mapping:

What is ORM?
-> It is a tool that acts as an interface between OOP language and a Relational Database
-> Helps represent database tables in corresponding object-oriented formats in OOP language
-> Allows accessing and manipulation of database tables just as we would objects in OOP language of choice
-> Helps translate code written in OOP languages into SQL queries for data processing and vice versa

Why use an ORM?
-> Provides abstraction from complex SQL queries
-> Seamless mapping between OOP language and Relational database
-> Let's switch between different databases quickly and effortlessly
-> Less code to write to perform operations
-> Helps overcome SQL injection attack

**********************************************
SQL Alchemy & SQLite Database:

SQL Alchemy:-
Flask-SQLAlchemy is an extension for flask that adds support for SQLAlchemy to your application. It simplifies using SQLAlchemy with flask by setting up common objects and patterns for using those objects such as a session tied to each web request, models and engines.

-> A python specific ORM tool
-> Can be used to connect with any database
-> Helps represent database tables as python classes
-> Helps work with rows and columns of a database table as class instances & attributes respectively in python


                     Concept | Database | Python

                       Data  |   Table  |  Class
                     Feature |  Column  | Attribute
                 Observation |    Row   | Class Instance
                   Operation |   Query  | Calling Methods


SQLite Database:-
-> Server-less, lightweight database engine
-> Written in C programming language
-> The database is stored as a file in the file system
-> Convenient for quick use & small-scale storage purposes

**********************************************
What is a web session?
-> A web session refers to the period of time an end user is active on a web application during a visit(until they logout or session is timed out)
-> Information about the interactions between the user and the application during each visit is usually stored at:
: Client side - Cookies(small chunks of data sent to application via server)
: Server side - database
-> This helps the server and the browser maintain user preferences throughout the duration of a particular visit to the website:
: User login status
: Items in online shopping cart
: Website layout/appearance preferences

**********************************************
Types of sessions:
(Based on duration)
1) Persistent Sessions:
-> These sessions remain active for a very long period of time
-> Ends only when the user manually terminates the session
-> Ex: social media platforms, OTT platforms

2) Non-persistent Sessions:
-> These sessions last for a very short period, probably a single application visit
-> Session ends when the application/browser is closed

(Based on Security Mechanism)
1) Authenticated Sessions:
-> Sessions are created only after the user has been authenticated (via login credentials)

2) Anonymous Sessions:
-> Sessions are created even if the user hasn't been authenticated
-> Useful for maintaining state information without authentication (as a 'Guest')
-> Ex: browsing online retail stores

(Based on storage location)
1) Client-side:
-> State information of the sessions is stored within the browser
-> Useful for storing small, insensitive data
-> Ex: browser cookies

2) Server-side:
-> State information of the sessions is stored in databases
-> Ideal for large volumes and sensitive data; offers improved security and integrity

**********************************************
Security Considerations:
(Measures to enhance security and integrity of session data getting stored)

1) Session ID:
-> The session ID should be long and randomly generated
-> The session ID should be changes periodically during a session
-> The session ID shouldn't be exposed as part of any URL

2) Secure Cookies:
-> Set the flags HttpOnly and Secure and the attribute SameSite while setting cookies over HTTP
-> HttpOnly prevents client-side scripts (Java Script) from accessing browser cookies, thus preventing XSS (cross-site scripting) attacks
-> Secure ensures that cookies are sent over the HTTPS domain, preventing interception over unsecured connections
-> SameSite helps prevent chances of CSRF attacks

(Set-Cookie: sessionId=abc123; HttpOnly; Secure; SameSite=Strict)

3) Session Timeout:
-> Can end sessions after a predefined period of inactivity
-> Can terminate sessions after a fixed duration, regardless of activity
-> Helps reduce the time window available for attackers

4) Logging & Monitoring:
-> Maintain logs of session creation, access, termination & various events to detect any unusual activity
-> Implement real-time monitoring systems to analyse logs and detect anomalies as they occur
-> Use automated tools to generate alerts for suspicious activities, enabling prompt investigation and response

5) Additional Measures:
-> Implement MFA (multi-factor authentication) for security of sessions
-> Prompt users to confirm any and all critical actions within a session
-> Notify users before session timeout due to inactivity, if they want to extend a session. This can improve user experience while maintaining security

**********************************************
Cookies:

(Definition)
-> A cookie, technically known as HTTP cookie, is a small piece of data that's sored within the browse where the end user is interacting with the web application
-> Main purpose of a cookie is to 'remember' the preferences of the user over a session. This helps provide the users a more personalized experience
-> Each browser has a specific database it uses to store cookies.
	: Chrome and Firefox use SQLite database

(Why cookies)
-> Helps improve overall user browsing experience:
: Maintaining login status
: Shopping carts in online retail stores
: Store user language, theme, appearance, custom settings and preferences
: Save website traffic for analytics
: Reduce CSRF/XSS attacks

Working of Cookies:

-> When user visits a web application and interacts with it, a HTTP request is sent to the server
-> The server generates an appropriate response message and sends it back to the application(browser), along with the session ID generated as well as a cookie header. This is done by the Set-Cookie header in the 'headers' part of the response message:
(Set-Cookie: sessionId=abc123; Expires=Wed, 21 Oct 2023 07:28:00 GMT; Secure; HttpOnly)


					   HTTP Response
				Protocol	Code	   Code Text
					       Headers
					        Body

-> Attributes to set a Cookie:
	: Name/Value: Contains the main data of the cookie
	: Expires/Max-Age: This determines the lifespan of the cookie
	: Path: Determines the URL for the cookie to be sent
	: Secure: A flag used to ensure cookies are sent over HTTPS
	: HttpOnly: Prevents XSS attacks
	: SameSite: Prevents CSRF attacks

-> The storage location of cookies at client-side varies depending on the browser and operating system. Typically, cookies are stored in databases
-> For subsequent requests from the client side, the relevant cookies will be included in the Cookie header in the 'headers' section of the request message
(Cookie: sessionId=abc123; userId=78910; theme=dark)

 					    HTTP Request
				 Method	        PATH	   Protocol
					       Headers
					        Body


-> Now, the server can identify the Session ID and retrieve the corresponding session data. This way, the server 'remembers' the user's preferences and is able to provide a personalized browsing experience
-> Cookies with the Expires or Max-Age attribute will be deleted automatically when the time comes. Else, they'll be deleted when the browser is closed

Types of Cookies:

1) First-party Cookies:
-> These cookies are used by the same application/website that the user is currently interacting with
-> These are considered to be more secure and protected, as they can only be accessed by the website the user is currently visiting
-> First Party cookies help with:
: Maintaining login status in application
: Keeping track of and storing user's preferences (language, theme, custom settings)
: Duration of visits on application
: Providing a personalized experience

2) Third-party Cookies:
-> Cookies that get stored in the browser but actually created by some other website which the user isn't currently visiting, are third-party cookies
-> Associated with greater security concerns as it exposes users browsing data to external parties (sometimes without consent)
-> These cookies are mainly used for:
: Tracking a user's activities across different websites, to generate targeted ads
: Analysing website traffic and performance for analytics
: Tailoring social media feeds by tracking user activity
: Generating user profiles based on data collected about a user's activities across different websites


What happens when we select 'Accept All Cookies'?
-> Equivalent of a user giving consent to store and use first-party and third-party cookies
-> Allows third-party companies to collect browsing data and activity across multiple websites. This helps with targeted ad generation, building user profiles, etc.
-> Higher risk of data leakage if the third-party companies are compromised

**********************************************
Security Considerations:

Measures to take, to protect data stored in Cookies:
1) Cookie Attributes:
: Use attributes and flags like HttpOnly and SameSite
: Helps avoid CSRF and XSS attacks

2) Cookie Poisoning:
: An attacker can modify the contents of cookies to gain unauthorized access to data
: Encrypt cookie data using hashes
: Avoid storing critical and sensitive information in cookies

3) Man-in-the-Middle Attacks:
: Attackers can intercept cookies and manipulate the communication between client & server
: Ensure to use Secure attribute and HTTPS channels for communication

4) Consent:
: Read all terms and conditions before accepting all cookies
: Minimize use of third-party cookies unless absolutely necessary

5) Similar to Sessions:
: Cookies are a part of sessions
: Cookies are generated within a session
: Similar security considerations will apply

**********************************************
Learning Curves:
-> A great tool for evaluating the performance of Machine Learning models
-> Act as a diagnostic tool and help to identify if the model is under-fitting or over fitting